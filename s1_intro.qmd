# Introducción

## Objetivos de la sesión

-   Introducción al R y fundamentos de programación

## Presentación

```{=html}
<iframe src="https://docs.google.com/presentation/d/e/2PACX-1vTv_Qyx_cMFYrUKhE49ygf01eUseWvWcr1UUWq3J1ZqgSF2f4ND9c0Q_GHLaATlZpCQLpXU_7psyzRe/embed?start=false&loop=false&delayms=600000" frameborder="0" width="480" height="299" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>
```
## Sobre R

### Consideraciones básicas

R es un lenguaje de programación y un entorno de software libre orientado principalmente al análisis estadístico y la representación gráfica de datos.

R es un lenguaje de programación que adopta el paradigma de la "programación orientada a objetos". Esto significa que, en R, todo se considera un "objeto", ya sea un conjunto de datos, una función o un modelo.

Cada objeto tiene atributos y comportamientos asociados que determinan cómo se puede interactuar con él.

Imagina que cada objeto en R es como un coche. Los "atributos" de ese coche pueden incluir su color, marca, modelo, y año de fabricación. Estos atributos describen las características específicas del coche. Ahora, piensa en los "comportamientos asociados" como las acciones que puedes realizar con ese coche: encenderlo, acelerar, frenar o encender las luces. Del mismo modo, en R, un objeto, como un conjunto de datos, podría tener atributos que describan su tamaño, tipo y estructura. Y los comportamientos asociados de ese conjunto de datos podrían incluir operaciones como filtrar, ordenar o aplicar una función estadística.

### Cómo programar: Script

Existen varias formas de escribir código en el R. Para ello tenemos algunas opciones simples, como el Script y otras un poco más elaboradas como el R Markdown.

Para fines de esta primera clase vamos a utilizar el script, el cual es un documento de texto que tiene la peculiaridad que puede ser leídos por el programa como un manual de código. De esa forma, nosotros podemos colocar en el script los códigos de nuestro análisis, ordenarlos, comentarlos y reproducirlos en el R Studio automáticamente.

En suma, podemos redactar nuestros script, compartirlos con otros investigadores y ejecutarlos.

-   Como comentario: Cuando nosotros colocamos el símbolo \# al iniciar una oración, el Script lo va a identificar como un comentario del programador, como un texto que no va a ser ejecutado como código. Esto es importante porque nos permite ir comentando, por ejemplo, lo que estamos redactando en el documento. Ej: “Este código sirve para abrir un archivo”, “Aquí estoy haciendo un análisis de regresión”, entre otros.

-   Como código: Cuando escribimos directamente en el documento el programa lo va a entender como código o funciones. Esto es importante tenerlo en cuenta para evitar notificaciones de Error.

Te recomiendo ver el siguiente video para que puedas aprender más sobre el Script, pero también sobre las otras opciones que el R te puede ofrecer.

{{< video https://www.youtube.com/watch?v=y7JPGlw6dJg&t=132s >}}

## Elementos básicos

### Objetos

Vamos a examinar la clase de algunos de los elementos más básicos en R.

Un objeto puede ser un número. En este caso el objeto es de tipo **numeric**.

```{r}
5
```

O también podría ser un nombre de un país. En este caso el objeto es de tipo **character**. Vas a notar que se trata de un caractér porque vas a visualizar el resultado entre comillas.

```{r}
"Perú"
```

Los objetos también pueden almacenarse en la memoria del programa con ciertos "nombres". Por ejemplo:

```{r}
year<-2024
year
```

```{r}
country<-"Perú"
country
```

::: callout-tip
Uno puede asignar un nombre a un objeto en el R con la flecha de asignación (\<-)
:::

### Vectores

-   Un vector es una colección de uno o más datos del mismo tipo.

-   Tipo. Un vector tiene el mismo tipo que los datos que contiene. Si tenemos un vector que contiene datos de tipo numérico, el vector será también de tipo numérico.

Ejemplo: Vamos a crear tres vectores: uno numérico, uno de caracter.

```{r}
vector_numerico <- c(1, 2, 3, 4, 5)
vector_numerico
```

```{r}
vector_caracter <- c("arbol", "casa", "persona")
vector_caracter
```

### Funciones

Una función es como una máquina a la que le das un insumo, o **input** para que realice un procedimiento específico. Luego de realizar el procedimiento, la máquina te da un resultado que le vamos a llamar **output**.

Por ejemplo, podemos utilizar la función `sqrt()` para obtener la raíz cuadrada de un número. En este caso aplicamos una función sobre un sólo número.

```{r}
sqrt(16)
```

Pero también podemos aplicar una función sobre un vector. Por ejemplo, podemos solicitar la función `sum()` para obtener la suma de todos los elementos de un vector numérico:

```{r}
sum(vector_numerico)
```

También podemos utilizar la función `class()` para corroborar que cada vector tiene la misma clase de los elementos que contiene.

```{r}
class(vector_numerico)
class(vector_caracter)
```

::: callout-tip
Te vas a dar cuenta que estás frente a una función porque usualmente está seguida de paréntesis en el cual se colocan los argumentos.
:::

### Dataframes

Los data frames son estructuras de datos de dos dimensiones (rectangulares) que pueden contener **vectores** de diferentes tipos.

Es la estructura más usada para ciencia de datos y la que vamos a ver de forma más recurrente en el curso.

Lo más importante que debes recordar es que las filas en un dataframe representan casos, individuos u observaciones, mientras que las columnas representan atributos, rasgos o variables.

Por ejemplo, tenemos la siguiente información sobre ciertos departamentos del Perú y sus niveles de pobreza:

```{r}
departamentos<-c("Huancavelica", "Ayacucho", "Pasco")
pobreza<-c(47.7, 46.4, 44.8)
mi_df<-data.frame(departamentos, pobreza)
mi_df
```

Una forma de examinar rápidamente un dataframe es utilizando la función `str()`:

```{r}
str(mi_df)
```

El output de esta función te indica las dimensiones del dataframe (número de observaciones y número de variables), así como los nombres de las variables, el tipo y algunos valores de muestra.

Otra función básica para explorar es `names()`, la cual te arroja exclusivamente los nombres de las variables del dataframe:

```{r}
names(mi_df)
```

### Índices

-   Usar índices para obtener subconjuntos es el procedimiento más universal en R, pues funciona para todas las estructuras de datos.

-   Un índice en R representa una posición.

-   Cuando usamos índices le pedimos a R que extraiga de una estructura los datos que se encuentran en una o varias posiciones específicas dentro de ella.

Ejemplos:

-   Seleccionar la columna 2:

```{r}
mi_df [,2]
```

Para seleccionar una columna, también podemos usar el símbolo de `$`. Es bastante usado en varias funciones.

```{r}
mi_df$pobreza
```

-   Seleccionar sólo el caso (fila) 2:

```{r}
mi_df [2,]
```

-   Seleccionar el elemento que se encuentra en la fila 2 y la columna 2:

```{r}
mi_df [2,2]
```

## Procedimientos básicos

Hasta aquí hemos aprendido los elementos básicos del R, ahora procederemos a analizar los procedimientos más cotidianos que realizaremos en un proceso de análisis de datos estadísticos.

### Apertura de paquetes

Líneas arriba te había comentado que existían funciones que podías aplicar sobre objetos en el R. Dabas un input y la función te arrojaba un determinado resultado.

Ahora bien, lo más interesante del R es que existen diferentes "conjuntos de funciones" para tareas específicas y que uno puede **instalar** y **utilizar** en tu proceso de análisis.

Para instalar un paquete necesitas escribir `install.packages("nombre_del_paquete")`. Luego de instalarlo, para comenzar a utilizarlo debes abrirlo con el siguiente comando `library(nombre_del_paquete)`.

Hagamos la prueba con el paquete `rio`, el cual es un paquete creado para importar/exportar archivos de diversos tipos.

Primero lo vamos a instalar. No te olvides que cuando instalas un paquete el nombre del mismo va entre comillas:

```{r}
#install.packages("rio")
```

::: callout-tip
Recuerda que la instalación de paquetes se realiza sólo una vez. Esto quiere decir que si instalas hoy el paquete "rio" ya no será necesario que realices esta operación nuevamente.
:::

Luego de instalarlo lo debemos abrir para utilizar las funciones que están en él.

```{r message=FALSE, warning=FALSE}
library(rio)
```

### Apertura de archivos

Lo más común es que se te va a entregar un archivo para que lo puedas abrir en el R. 

Para ello, una primera forma sencilla de abrir un archivo es haciendo uso de la función `import` del paquete `rio`:

```{r}
data<-import("data/regiones.xlsx")
```

Una vez que abrimos una data y corroboramos que está en nuestro Environment podemos explorarla.

Viendo un encabezado de las primeras filas:

```{r}
head(data)
```

Analizando su estructura:

```{r}
str(data)
```

```{r}
names(data)
```

